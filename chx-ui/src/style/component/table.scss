@import '../mixins/mixin.scss';
@import '../mixins/config.scss';

%cx-table-head {
  background-color: $table-head-bg-color;
  font-style: normal;
  font-weight: bold !important;
  font-size: 14px;
}

$block: #{$namespace}-table;

@function append-to-block ($args...) {
  @return #{block-join($element-separator,$block,$args...)}
}

@mixin sticky-prop($property) {
  @if index(['top','bottom','left','right','width','height'],$property) != null {
    #{$property}: calc(var(--sticky-#{$property}) * 1px) !important;
  } @else {
    @error "Error type in sticky-prop argument => #{$property}"
  }
}

%common-cell {
  height: calc(var(--cell-height) * 1px);
  max-height: calc(var(--cell-height) * 1px);
  box-sizing: border-box;
  background-image: linear-gradient(#dfe2e9, #dfe2e9), linear-gradient(#dfe2e9, #dfe2e9);
  background-repeat: no-repeat;
  background-size: 1px 100%, 100% 1px;
  background-position: right top, right bottom;
  padding: 0;
  font-size: 14px;
  border-spacing: 0;
  border-collapse: separate;

  .#{append-to-block(cell)} {
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    padding: 0 calc(var(--padding) * 1px);
    box-sizing: border-box;
    max-height: calc(var(--cell-height) * 1px);
    vertical-align: baseline;
    position: relative;

    img {
      vertical-align: middle;
    }

    .el-input .el-input__inner {
      border: 0 !important;
      background-color: transparent;
      box-shadow: none !important;
    }
  }
}

@mixin fixed-table($pick...) {
  position: absolute;
  overflow: hidden;
  top: 0;
  @content;
  z-index: 10;

  @if index($pick,head) != null {
    &.#{append-to-block(head)} {
      z-index: 15;
    }
  }

  @if index($pick,body) != null {
    &.#{append-to-block(body)} {
      z-index: 15;
    }
  }

  > table {
    position: absolute;
    overflow: hidden;
    top: 0;
    @content;
    z-index: 15;
  }
}

%box-shadow {
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
}

@include b(table) {
  position: relative;
  overflow: hidden;

  @include e(wrapper) {
    position: relative;
  }

  @include scrollType(var(--scroll-width), var(--scroll-width));

  @include e(head) {
    @include when(sticky) {
      position: fixed !important;
      z-index: 100 !important;
      overflow: hidden !important;
      @include sticky-prop(top);
      &.#{block-join($element-separator,$block, center)} {
        @include sticky-prop(width);
        @include sticky-prop(left);
      }
      &.#{block-join($element-separator,$block, fixed, left)} {
        @include sticky-prop(left);
      }
      &.#{block-join($element-separator,$block, fixed, right)} {
        right: calc(100vw - var(--sticky-right) * 1px) !important;
      }
    }
  }

  @include e(block-join($element-separator, scroll, wrapper)) {
    position: static !important;
    overflow: auto;

    table {
      border-collapse: separate !important;
      width: 100%;

      @include when(stripe) {
        tr:nth-of-type(2n) {
          td {
            background-color: #f9fafc;
          }
        }
        tbody tr.#{append-to-block(row,hover)} {
          td {
            background-color: #e3f3fe;
          }
        }
      }

      tr {
        &.#{append-to-block(footer)} > td {
          @extend %cx-table-head;
        }

        .#{append-to-block(expend)} {
          overflow: auto;
        }

        .#{append-to-block(hover,show)} {
          visibility: hidden;
        }

        @include when(active) {
          td {
            background-color: #BDE1FF !important;
          }
        }
      }

      tbody tr.#{append-to-block(row,hover)} {
        .#{append-to-block(hover,show)} {
          visibility: visible;
        }
        td {
          background-color: #e3f3fe;
        }
      }

      td {
        @extend %common-cell;
        background-color: white;
        position: relative;

        @include when(active) {
          box-shadow: inset 0 0 0 2px $color-primary;
        }
      }

      th {
        @extend %common-cell;
        @extend %cx-table-head;

        span {
          @extend %cx-table-head;
        }
      }

      &.#{append-to-block(empty)} {
        position: absolute;
        left: 0;

        tr {
          height: 150px;
        }

        td {
          padding: 10px 0;
        }
      }
    }

    .#{append-to-block(border,line)} {
      box-sizing: border-box;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 30;
      pointer-events: none;
      border: 1px solid #dfe2e9;
    }

    .#{append-to-block(fixed,left)} {
      @include fixed-table(head, body) {
        left: 0;
      }
    }
    .#{append-to-block(fixed,right)} {
      @include fixed-table(head, body) {
        right: 0;
      }
    }
    .#{append-to-block(fixed,top)} {
      @include fixed-table() {
        left: 0;
      }
    }
    .#{append-to-block(fixed,bottom)} {
      position: absolute;
      overflow: hidden;
      bottom: 0;
      left: 0;
      height: calc(var(--cellHeight) * 1px);
      z-index: 15;

      > table {
        position: absolute;
        overflow: hidden;
        z-index: 15;
        left: 0;
        top: 0;
      }
    }
  }

  @each $position in left, right, top, bottom {
    .#{append-to-block($position,shadow)} {
      @extend %box-shadow;
    }
  }
  .#{append-to-block(right,shadow)} {
    border-left: 1px solid #d9d9d9;
  }
  .#{append-to-block(bottom,shadow)} {
    border-top: 1px solid #d9d9d9;
  }

  .#{append-to-block(sort)} {
    width: 14px;
    height: 14px;
    cursor: pointer;
    margin-left: 5px;
    display: inline-flex;
    align-items: center;
    flex-direction: column;
    position: absolute;
    top: 50%;
    transform: translateY(-50%);

    &::before,
    &::after {
      width: 0;
      height: 0;
      content: '';
      border-width: 5px;
      border-color: transparent;
      border-style: solid;
    }

    &::after {
      border-top-color: #ddd;
    }

    &::before {
      transform: translateY(-6px);
      border-bottom-color: #ddd;
    }
  }

  .#{append-to-block(sort,positive)} {
    &::after {
      border-top-color: $color-primary !important;
    }
  }

  .#{append-to-block(sort,reverse)} {
    &::before {
      border-bottom-color: $color-primary !important;
    }
  }

  .el-radio {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .el-radio__label {
    display: none;
  }
}

.#{append-to-block(tele,form)} {
  label.el-form-item__label {
    padding: 0;
  }
}

.#{append-to-block(wrong,msg)} {
  color: #fff !important;
  background-color: #f56c6c !important;

  .cx-uni-popper__arrow::before {
    background-color: #f56c6c !important;
  }
}
